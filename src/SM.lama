-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun readInsn ([stack, state, w]) {
  var readResult = readWorld (w);
  [readResult[0]:stack, state, readResult[1]]
}

fun writeInsn ([n:stack, state, w]) {
  var newW = writeWorld (n, w);
  [stack, state, newW]
}

fun binopInsn ([b:a:stack, state, w], op) {
  var ex = Binop (op, Const (a), Const (b));
  var result = evalExpr (state, ex);
  [result:stack, state, w]
}

fun ldInsn ([stack, state, w], x) {
  [state (x):stack, state, w]
}

fun stInsn ([value:stack, state, w], name) {
  [stack, state <- [name, value], w]
}

fun constInsn ([stack, state, w], value) {
  [value:stack, state, w]
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (fun (conf, insn) {
    -- printf("conf: %s\n", string(conf));
    case insn of
      READ             -> readInsn  (conf)
    | WRITE            -> writeInsn (conf)
    | BINOP       (op) -> binopInsn (conf, op)
    | LD           (x) -> ldInsn    (conf, x)
    | ST        (name) -> stInsn    (conf, name)
    | CONST (value) -> constInsn (conf, value)
    | _                -> failure ("invalid program\n")
    esac
  }, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf("%s\n", string(insns));
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x)              -> {LD (x)}
  | Const (n)            -> {CONST (n)}
  | Binop (oper, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP (oper)}
  | _                    -> failure ("invalid expression\n")
  esac
}

fun compileAssn (name, expr) {
  compileExpr (expr) +++ {ST (name)}
}

fun compileSeq (stmt1, stmt2) {
  compileSM (stmt1) +++ compileSM (stmt2)
}

fun compileRead (name) {
  {READ, ST (name)}
}

fun compileWrite (expr) {
  compileExpr (expr) +++ {WRITE}
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (name, expr) -> compileAssn (name, expr)
    | Seq (stmt1, stmt2) -> compileSeq (stmt1, stmt2)
    | Skip               -> {}
    | Read        (name) -> compileRead (name)
    | Write       (expr) -> compileWrite (expr)
  esac
}
